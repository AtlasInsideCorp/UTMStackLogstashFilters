filter {
# Sophos filter version 1.1.1
# Based in https://docs.sophos.com/nsg/sophos-firewall/17.5/PDF/SFOS_Logfile_Guide_17.5.pdf
# and https://docs.sophos.com/nsg/sophos-firewall/17.5/Help/en-us/webhelp/onlinehelp/nsg/sfos/concepts/LogMessages.html
# and https://docs.sophos.com/nsg/sophos-firewall/17.5/Help/en-us/webhelp/onlinehelp/nsg/concepts/LogIDStructure.html
# and https://docs.sophos.com/nsg/sophos-firewall/17.5/Help/en-us/webhelp/onlinehelp/nsg/sfos/concepts/LogFields.html

	if [type] == "syslog" and ![dataType] {
		#First, search for common fields and parse them
		grok {
			match => {
				"message" => [
				"device=%{QUOTEDSTRING:device} date=%{DATA:syslog_timestamp} time=%{TIME:xg_time} timezone=%{DATA:xg_timezone} device_name=%{QUOTEDSTRING:device_name} device_id=%{DATA:device_id} log_id=%{DATA:log_id} log_type=%{QUOTEDSTRING:log_type} log_component=%{QUOTEDSTRING:log_component} log_subtype=%{QUOTEDSTRING:log_subtype}( status=%{QUOTEDSTRING:status})? %{GREEDYDATA:msg}",
				"%{GREEDYDATA}device=%{QUOTEDSTRING:device} date=%{DATA:syslog_timestamp} time=%{TIME:xg_time} timezone=%{DATA:xg_timezone} device_name=%{QUOTEDSTRING:device_name} device_id=%{DATA:device_id} log_id=%{DATA:log_id} log_type=%{QUOTEDSTRING:log_type} log_component=%{QUOTEDSTRING:log_component} log_subtype=%{QUOTEDSTRING:log_subtype}( status=%{QUOTEDSTRING:status})? %{GREEDYDATA:msg}"
				]
			}
		}
		#Replacing string quotation for common fields
			mutate {
				gsub => ["device", '"', ""]
				gsub => ["device_name", '"', ""]
				gsub => ["log_type", '"', ""]
				gsub => ["log_component", '"', ""]
				gsub => ["log_subtype", '"', ""]
				gsub => ["status", '"', ""]
			}
			#Other fields needed for rules in Correlation Engine 
			grok {
				match => {
					"msg" => [
					"priority=%{WORD:priority} %{GREEDYDATA}",
					"%{GREEDYDATA} priority=%{WORD:priority} %{GREEDYDATA}"
					]
				}
			}
			grok {
				match => {
					"msg" => [
					"%{GREEDYDATA} sent_bytes=%{INT:sent_bytes} %{GREEDYDATA}"
					]
				}
			}
			grok {
				match => {
					"msg" => [
					"%{GREEDYDATA} recv_bytes=%{INT:recv_bytes} %{GREEDYDATA}"
					]
				}
			}
			#Adding common fields to logx tree structure
			mutate {
				add_field => { "[dataType]" => "firewall-sophos-xg" }
				rename => { "[device]" => "[logx][sophos][device]" }
				rename => { "[device_name]" => "[logx][sophos][device_name]" }
				rename => { "[device_id]" => "dataSource" }
				rename => { "[log_id]" => "[logx][sophos][log_id]" }
				rename => { "[log_type]" => "[logx][sophos][log_type]" }
				rename => { "[log_component]" => "[logx][sophos][log_component]" }
				rename => { "[log_subtype]" => "[logx][sophos][log_subtype]" }
				rename => { "[status]" => "[logx][sophos][status]" }
				rename => { "[message]" => "[logx][sophos][message]" }
				rename => { "[syslog_timestamp]" => "[logx][sophos][syslog_timestamp]" }
				rename => { "[xg_time]" => "[logx][sophos][xg_time]" }
				rename => { "[xg_timezone]" => "[logx][sophos][xg_timezone]" }
				rename => { "[priority]" => "[logx][sophos][priority]" }
				rename => { "[sent_bytes]" => "[logx][sophos][sent_bytes]" }
				rename => { "[recv_bytes]" => "[logx][sophos][recv_bytes]" }
			}
		if [logx][sophos][device] == "SFW" {
			#Fields from Firewall log_type
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} src_ip=%{IP:src_ip} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} dst_ip=%{IP:dst_ip} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} protocol=%{QUOTEDSTRING:proto} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} src_port=%{NUMBER:src_port} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} dst_port=%{NUMBER:dst_port} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} application=%{QUOTEDSTRING:application} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} application_risk=%{NUMBER:application_risk} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} application_technology=%{QUOTEDSTRING:application_technology} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} application_category=%{QUOTEDSTRING:application_category} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} user_name=%{QUOTEDSTRING:user_name} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} src_country_code=%{WORD:src_country_code} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} dst_country_code=%{WORD:dst_country_code} %{GREEDYDATA}"
						]
					}
				}
			#New fields from Content Filtering
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} category=%{QUOTEDSTRING:category} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} category_type=%{QUOTEDSTRING:category_type} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} url=%{QUOTEDSTRING:url} %{GREEDYDATA}"
						]
					}
				}
			#New fields from Event log_type
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} reason=%{QUOTEDSTRING:reason} %{GREEDYDATA}"
						]
					}
				}
				grok {
					match => {
						"msg" => [
						"%{GREEDYDATA} message=%{QUOTEDSTRING:event_message} %{GREEDYDATA}"
						]
					}
				}
			
                mutate {
					#Fields from Firewall log_type
					gsub => ["src_ip", '"', ""]
					gsub => ["src_port", '"', ""]
					gsub => ["dst_ip", '"', ""]
					gsub => ["dest_port", '"', ""]
					gsub => ["proto", '"', ""]
					gsub => ["application", '"', ""]
					gsub => ["application_risk", '"', ""]
					gsub => ["application_technology", '"', ""]
					gsub => ["application_category", '"', ""]
					gsub => ["user_name", '"', ""]
					gsub => ["src_country_code", '"', ""]
					gsub => ["dst_country_code", '"', ""]

					#New fields from Content Filtering log_type
					gsub => ["category", '"', ""]
					gsub => ["category_type", '"', ""]
					gsub => ["url", '"', ""]

					#New fields from Event log_type
					gsub => ["reason", '"', ""]
					gsub => ["event_message", '"', ""]

					}
				mutate {
					#Fields from Firewall log_type, adding to logx tree structure
					rename => { "[src_ip]" => "[logx][sophos][src_ip]" }
					rename => { "[src_port]" => "[logx][sophos][src_port]" }
					rename => { "[dst_ip]" => "[logx][sophos][dest_ip]" }
					rename => { "[dst_port]" => "[logx][sophos][dest_port]" }
					rename => { "[proto]" => "[logx][sophos][proto]" }
					rename => { "[application]" => "[logx][sophos][application]" }
					rename => { "[application_risk]" => "[logx][sophos][application_risk]" }
					rename => { "[application_technology]" => "[logx][sophos][application_technology]" }
					rename => { "[application_category]" => "[logx][sophos][application_category]" }
					rename => { "[user_name]" => "[logx][sophos][user_name]" }
					rename => { "[src_country_code]" => "[logx][sophos][src_country_code]" }
					rename => { "[dst_country_code]" => "[logx][sophos][dst_country_code]" }

					#New fields from Content Filtering log_type
					rename => { "[category]" => "[logx][sophos][category]" }
					rename => { "[category_type]" => "[logx][sophos][category_type]" }
					rename => { "[url]" => "[logx][sophos][url]" }

					#New fields from Event log_type
					rename => { "[reason]" => "[logx][sophos][reason]" }
					rename => { "[event_message]" => "[logx][sophos][event_message]" }

				}
		}
       #Generating action field used by Correlation engine
       if [logx][sophos][status] =~/(Allow|Allow Session|Successful|Established|Connected|Success|Renew)/ {
          mutate {
            add_field => { "[logx][sophos][action]" => "Success" }
          }
       } else if [logx][sophos][status] == "Interim" and 
                ([logx][sophos][sent_bytes] != "0" and [logx][sophos][recv_bytes] != "0") {		
          mutate {
            add_field => { "[logx][sophos][action]" => "Success" }
          }

       } else if [logx][sophos][log_subtype] == "Allowed" and 
                (![logx][sophos][status] or [logx][sophos][status] == "") and 
                ([logx][sophos][sent_bytes] != "0" and [logx][sophos][recv_bytes] != "0") {
          mutate {
            add_field => { "[logx][sophos][action]" => "Success" }
          }
       } else if ([logx][sophos][log_component] == "FTP" or [logx][sophos][log_component] == "HTTP") and 
                 [logx][sophos][recv_bytes] != "0" {
          mutate {
            add_field => { "[logx][sophos][action]" => "Success" }
          }
       }
   }
   #Finally, remove unnecessary fields
   mutate {
      remove_field => ["@version","path","tags","type","msg"]
   }
}
