filter {
   if "%FTD-" in [message] {
#......................................................................#
# Cisco Firepower bassed on https://www.cisco.com/c/en/us/td/docs/security/firepower/Syslogs/b_fptd_syslog_guide.html (january 2022)
#Using grok to parse priority if present
        grok {
 			match => {
 				"message" => [
				"(<%{NUMBER:priority}>)?%{GREEDYDATA:cisco_msg_init}"
 				]
 			}
 		}
#......................................................................#
#Using grok to parse date and ip or host if present
        grok {
 			match => {
 				"cisco_msg_init" => [
				"%{CISCOTIMESTAMP:fecha} (%{IPORHOST:dataSource})?(:)? %{GREEDYDATA:cisco_message}"
 				]
 			}
 		}
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
#Checks if exists, if not evaluate to the host variable
 if (![dataSource]){
    mutate {
     add_field => { "dataSource" => "%{host}" }
	}
 }
#......................................................................# 
#Generating dataType field required by CurrelationRulesEngine
   mutate {
		  add_field => {
			"dataType" => "firewall-cisco-firepower"
		  }
	   }
#......................................................................#
#Using grok to parse Firepower severity and message ID
        grok {
 			match => {
 				"cisco_message" => [
				"%%{GREEDYDATA:cisco_tag}-%{INT:severity}-%{INT:messageid}: %{GREEDYDATA:cisco_msg}"
 				]
 			}
 		}
#......................................................................#
#Begin Firepower message processing by ID based on https://www.cisco.com/c/en/us/td/docs/security/firepower/Syslogs/b_fptd_syslog_guide.html (january 2022)
#......................................................................#
#FTD-2-106001
   if [messageid]=="106001" {
        grok {
 			match => {
 				"cisco_msg" => [
				"%{WORD:direction} %{WORD:protocol} connection %{WORD:action} from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} flags %{GREEDYDATA:tcp_flags} on interface %{GREEDYDATA:src_interface}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-6-106102,106103
   if [messageid]=="106102" or [messageid]=="106103"{
        grok {
 			match => {
 				"cisco_msg" => [
				"access-list %{GREEDYDATA:access_list} %{WORD:action} %{WORD:protocol} for user ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) %{DATA:src_interface}/%{IPORHOST:src_ip}(\s)?\((\s)?%{INT:src_port}(\s)?\)(\s)?->(\s)?%{DATA:dst_interface}/%{IPORHOST:dst_ip}(\s)?\((\s)?%{INT:dst_port}(\s)?\) hit-cnt %{INT:hit_count} %{GREEDYDATA:irrelevant}",
				"access-list %{GREEDYDATA:access_list} %{WORD:action} %{WORD:protocol} for user ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) %{DATA:src_interface}/%{IPORHOST:src_ip} %{INT:src_port} %{DATA:dst_interface}/%{IPORHOST:dst_ip} %{INT:dst_port} hit-cnt %{INT:hit_count} %{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-109101,109102,109103
   if [messageid]=="109101" or [messageid]=="109102" or [messageid]=="109103"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Received CoA %{WORD:action} request from %{IPORHOST:src_ip} for user ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}), with audit-session-id: %{GREEDYDATA:audit_session_id}",
				"Received CoA %{WORD:action} from %{IPORHOST:src_ip}, but cannot find named session %{GREEDYDATA:audit_session_id}",
				"CoA %{WORD:action} from %{IPORHOST:src_ip} failed for user ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}), with session ID: %{GREEDYDATA:audit_session_id}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-109201 to 109213
   if [messageid]>="109201" and [messageid]<="109213"{
        grok {
 			match => {
 				"cisco_msg" => [
				"UAUTH(:)? Session(\s|=)%{GREEDYDATA:session}, User(\s|=)('%{DATA:src_fwuser}'|%{DATA:src_fwuser}), Assigned IP(\s|=)%{IPORHOST:src_ip}, %{GREEDYDATA:action}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113004
   if [messageid]=="113004"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA user %{WORD:aaa_type} Successful : server = %{IPORHOST:src_ip} : user = %{GREEDYDATA:src_fwuser}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113005
   if [messageid]=="113005"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA user authentication Rejected(\s)?:(\s)?reason(\s)?=(\s)?%{DATA:reason}(\s)?:(\s)?(server|Server)(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?(User|user)(\s)?=(\s)?%{DATA:src_fwuser}(\s)?:(\s)?(User|user) IP(\s)?=(\s)?%{IPORHOST:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113008
   if [messageid]=="113008"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA transaction status ACCEPT(\s)?:(\s)?(user|User)(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113009
   if [messageid]=="113009"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA retrieved default group policy \(%{GREEDYDATA:policy}\) for (user|User)(\s)?=(\s)?%{GREEDYDATA:src_fwuser}",
				"AAA retrieved default group policy %{GREEDYDATA:policy} for (user|User) %{GREEDYDATA:src_fwuser}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113010
   if [messageid]=="113010"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA challenge received for user ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) from server %{IPORHOST:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113011
   if [messageid]=="113011"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA retrieved user specific group policy %{GREEDYDATA:policy} for user %{GREEDYDATA:src_fwuser}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113012
   if [messageid]=="113012"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA user authentication Successful(\s)?: local database(\s)?: user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113013
   if [messageid]=="113013"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA unable to complete the request Error(\s)?:(\s)?reason(\s)?=(\s)?%{GREEDYDATA:reason}:(\s)?user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113014
   if [messageid]=="113014"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA authentication server not accessible(\s)?: server(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?:(\s)?user(\s)?=(\s)?%{GREEDYDATA:src_fwuser}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113015, 113017
   if [messageid]=="113015" or [messageid]=="113017"{
        grok {
 			match => {
 				"cisco_msg" => [
				"(AAA user authentication Rejected|AAA credentials rejected)(\s)?: reason(\s)?=(\s)?%{DATA:reason}(\s)?:(\s)?local database(\s)?:(\s)?user(\s)?=(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?:(\s)?user IP(\s)?=(\s)?%{IPORHOST:src_ip}(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113016
   if [messageid]=="113016"{
        grok {
 			match => {
 				"cisco_msg" => [
				"AAA credentials rejected(\s)?: reason(\s)?=(\s)?%{GREEDYDATA:reason}:(\s)?server(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?user(\s)?=(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?:(\s)?user IP(\s)?=(\s)?%{IPORHOST:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113019
   if [messageid]=="113019"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Group(\s)?=(\s)?%{GREEDYDATA:group}(\s)?,(\s)?Username(\s)?=(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?,(\s)?IP(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?,(\s)?Session disconnected.(\s)?Session Type:(\s)?%{GREEDYDATA:session_type}(\s)?,(\s)?Duration:(\s)?%{GREEDYDATA:duration}(\s)?,(\s)?Bytes xmt:(\s)?%{INT:bytes_xmt}(\s)?,(\s)?Bytes rcv:(\s)?%{INT:bytes_rcv}(\s)?,(\s)?Reason:(\s)?%{GREEDYDATA:reason}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113031,113032,113033
   if [messageid]=="113031" or [messageid]=="113032" or [messageid]=="113033"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Group %{GREEDYDATA:group} User ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} AnyConnect (vpn-filter|ipv6-vpn-filter) %{GREEDYDATA:filter} is an (IPv6|IPv4) ACL; ACL not applied.",
				"Group %{GREEDYDATA:group} User ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} AnyConnect session not allowed.(\s)?ACL parse error."
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113034,113035,113036,113038,113039
   if [messageid]>="113034" and [messageid]<="113039" and [messageid]!="113037"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|'%{DATA:src_fwuser}'|%{DATA:src_fwuser}) IP (<%{IPORHOST:src_ip}>|%{IPORHOST:src_ip}) %{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-113042
   if [messageid]=="113042"{
        grok {
 			match => {
 				"cisco_msg" => [
				"CoA: Non-HTTP connection from %{GREEDYDATA:src_interface}(\s)?:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}(\s)?:(\s)?%{IPORHOST:dst_ip}(\s)?/%{INT:dst_port} for user ('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) at %{IPORHOST:client_ip} %{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-316001
   if [messageid]=="316001"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Denied new tunnel to %{IPORHOST:src_ip}%{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-316002
   if [messageid]=="316002"{
        grok {
 			match => {
 				"cisco_msg" => [
				"VPN Handle error:(\s)?protocol=%{GREEDYDATA:protocol}(\s)?,(\s)?src %{INT:in_if_num}(\s)?:(\s)?%{IPORHOST:src_ip},(\s)?dst %{INT:out_if_num}(\s)?:(\s)?%{IPORHOST:dst_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302003,302004
   if [messageid]=="302003" or [messageid]=="302004" {
        grok {
 			match => {
 				"cisco_msg" => [
				"(Built H245 connection|Pre-allocate H323 UDP backconnection) for foreign_address %{IPORHOST:src_ip}(/%{INT:src_port}|/)? (to(\s))?local_address %{IPORHOST:dst_ip}(/%{INT:dst_port}|/)?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302012
   if [messageid]=="302012"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Pre-allocate H225 Call Signalling Connection for faddr %{GREEDYDATA:src_ip}/%{INT:src_port} to laddr %{GREEDYDATA:dst_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302013
   if [messageid]=="302013"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{WORD:direction} (Probe)?(\s)?%{WORD:protocol} %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\(%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\(('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\(('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302014
   if [messageid]=="302014"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown (Probe)?(\s)?%{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} (\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))?(\s)?duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302015
   if [messageid]=="302015"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\(%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302016
   if [messageid]=="302016"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302017
   if [messageid]=="302017"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} \((\s)?%{IPORHOST:translated_src_ip}(\s)?\)(\s)?(\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/%{DATA:real_cid} \(%{IPORHOST:translated_dst_ip}(\s)?/%{DATA:translated_cid}\)(\s)?(\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))?(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302018
   if [messageid]=="302018"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} \((\s)?%{IPORHOST:translated_src_ip}(\s)?\)(\s)?(\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))? to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/%{DATA:real_cid} \(%{IPORHOST:translated_dst_ip}(\s)?/%{DATA:translated_cid}\)(\s)?(\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt}(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302020
   if [messageid]=="302020"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{WORD:direction} %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})/%{INT:dst_port}(\s)?(\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?gaddr %{GREEDYDATA:global_ip}/%{INT:global_port} laddr %{IPORHOST:src_ip}/%{INT:src_port}(\s)?(\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))? type %{INT:icmp_type} code %{INT:code}",
				"Built %{WORD:direction} %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip}) (\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?gaddr %{GREEDYDATA:global_ip} laddr %{IPORHOST:src_ip} (\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))?(\s)?type %{INT:icmp_type} code %{INT:code}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302021
   if [messageid]=="302021"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})/%{INT:dst_port}(\s)?(\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))? gaddr %{GREEDYDATA:global_ip}/%{INT:global_port} laddr %{IPORHOST:src_ip}/%{INT:src_port}(\s)?(\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))? type %{INT:icmp_type} code %{INT:code}",
				"Teardown %{WORD:protocol} connection for faddr (%{IPORHOST:dst_ip}|%{INT:dst_ip})(\s)?(\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))? gaddr %{GREEDYDATA:global_ip} laddr %{IPORHOST:src_ip} (\((\s)?('%{DATA:dst_fwuser}'|%{DATA:dst_fwuser})(\s)?\))?(\s)?type %{INT:icmp_type} code %{INT:code}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302022,302024,302026
   if [messageid]=="302022" or [messageid]=="302024" or [messageid]=="302026" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{GREEDYDATA:role} stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(%{GREEDYDATA:irrelevant})?",
				"Built %{GREEDYDATA:role} stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?\)(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302023,302025,302027
   if [messageid]=="302023" or [messageid]=="302025" or [messageid]=="302027"{
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown stub %{WORD:protocol} connection for %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} duration %{GREEDYDATA:duration} forwarded bytes %{INT:bytes_xmt} %{GREEDYDATA:reason}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302033,302034
   if [messageid]=="302033" or [messageid]=="302034" {
        grok {
 			match => {
 				"cisco_msg" => [
				"(Pre-allocated|Unable to pre-allocate) H323 GUP Connection for faddr %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to laddr %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302035
   if [messageid]=="302035" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{WORD:direction} %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\(%{DATA:info_user2}\))?(%{GREEDYDATA:toEnd})?"
 				]
 			}
 		}
		#Decoding user optional of the source interface
		if [info_user1] {
           grok {
 			match => {
 				"info_user1" => [
				"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
 				]
 			}
 		}			
		}
		#Decoding user optional of the destination interface
		if [info_user2] {
           grok {
 			match => {
 				"info_user2" => [
				"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
 				]
 			}
 		}			
		}
		#Decoding reason and emitter user
		if "(" in [toEnd] {
		   grok {
 			match => {
 				"toEnd" => [
				"(\s)?\((\s)?%{DATA:src_fwuser}(\s)?\)(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
		}			
		#Finally deleting unnecessary fields
		mutate {
            remove_field => ["info_user1","info_user2","toEnd"]
        }
   }
#......................................................................#
#FTD-302036
   if [messageid]=="302036" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{WORD:protocol} connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\(%{DATA:info_user2}\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt} %{GREEDYDATA:reasonToEnd}"
 				]
 			}
 		}
		#Decoding user optional of the source interface
		if [info_user1] {
           grok {
 			match => {
 				"info_user1" => [
				"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
 				]
 			}
 		}			
		}
		#Decoding user optional of the destination interface
		if [info_user2] {
           grok {
 			match => {
 				"info_user2" => [
				"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
 				]
 			}
 		}			
		}
		#Decoding reason and emitter user
		if "(" in [reasonToEnd] {
		   grok {
 			match => {
 				"reasonToEnd" => [
				"%{GREEDYDATA:reason} \((\s)?%{DATA:src_fwuser}(\s)?\)(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}			
		}else {
			mutate {
               add_field => { "reason" => "%{reasonToEnd}" }
            }
		}
		#Finally deleting unnecessary fields
		mutate {
            remove_field => ["info_user1","info_user2","reasonToEnd"]
        }
   }
#......................................................................#
#FTD-302303
   if [messageid]=="302303" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\) to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302304
   if [messageid]=="302304" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} %{GREEDYDATA:duration},(\s)?%{INT:bytes_xmt}(\s)?,%{GREEDYDATA:reason}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-302305
   if [messageid]=="302305" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Built %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?\((\s)?%{IPORHOST:mapped_src_ip}(\s)?/(\s)?%{INT:mapped_src_port}(\s)?\)(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?\((\s)?%{IPORHOST:mapped_dst_ip}(\s)?/(\s)?%{INT:mapped_dst_port}(\s)?\)(\s)?(\(%{DATA:info_user2}\))?(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
		#Decoding user optional of the source interface
		if [info_user1] {
           grok {
 			match => {
 				"info_user1" => [
				"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
 				]
 			}
 		}			
		}
		#Decoding user optional of the destination interface
		if [info_user2] {
           grok {
 			match => {
 				"info_user2" => [
				"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
 				]
 			}
 		}			
		}			
		#Finally deleting unnecessary fields
		mutate {
            remove_field => ["info_user1","info_user2"]
        }
   }
#......................................................................#
#FTD-302306
   if [messageid]=="302306" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{WORD:protocol} state-bypass connection %{GREEDYDATA:connection_id} for %{DATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port}(\s)?(\(%{DATA:info_user1}\))? to %{DATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}(\s)?(\(%{DATA:info_user2}\))? duration %{GREEDYDATA:duration} bytes %{INT:bytes_xmt} %{GREEDYDATA:reason}"
 				]
 			}
 		}
		#Decoding user optional of the source interface
		if [info_user1] {
           grok {
 			match => {
 				"info_user1" => [
				"(\s)?%{DATA:src_fwuser}(\s)?,(\s)?%{DATA:src_fwuser}(\s)?"
 				]
 			}
 		}			
		}
		#Decoding user optional of the destination interface
		if [info_user2] {
           grok {
 			match => {
 				"info_user2" => [
				"(\s)?%{DATA:dst_fwuser}(\s)?,(\s)?%{DATA:dst_fwuser}(\s)?"
 				]
 			}
 		}			
		}
		#Finally deleting unnecessary fields
		mutate {
            remove_field => ["info_user1","info_user2","reasonToEnd"]
        }
   }
#......................................................................#
#FTD-305009
   if [messageid]=="305009" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Built (dynamic|static) translation from %{DATA:src_interface}(\s)?(\(%{DATA:acl_name}\))?:%{IPORHOST:src_ip} (\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{DATA:dst_interface}(\s)?:%{GREEDYDATA:dst_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-305010
   if [messageid]=="305010" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown (dynamic|static) translation from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip} (\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip} duration %{GREEDYDATA:duration}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-305011
   if [messageid]=="305011" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Built (dynamic|static) %{WORD:protocol} translation from %{GREEDYDATA:src_interface}:(\s)?%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-305012
   if [messageid]=="305012" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown (dynamic|static) %{WORD:protocol} translation from %{DATA:src_interface}(\s)?(\(%{DATA:acl_name}\))?:%{IPORHOST:src_ip}(\s)?/(\s)?%{INT:src_port} (\((\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?\))?(\s)?to %{GREEDYDATA:dst_interface}:(\s)?%{IPORHOST:dst_ip}(\s)?/(\s)?%{INT:dst_port} duration %{GREEDYDATA:duration}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-603109
   if [messageid]=="603109" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{WORD:protocol} Tunnel at %{GREEDYDATA:src_interface},(\s)?tunnel-id(\s)?=(\s)?%{INT:tunnel_id}(\s)?,(\s)?remote-peer(\s)?=(\s)?%{IPORHOST:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-617100
   if [messageid]=="617100" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown %{INT:num_conns} connection(\s)?(\(s\))? for user %{GREEDYDATA:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-106018
   if [messageid]=="106018" {
        grok {
 			match => {
 				"cisco_msg" => [
				"%{WORD:protocol} packet type %{INT:icmp_type} %{WORD:action} by %{WORD:direction} list %{GREEDYDATA:access_list} src %{GREEDYDATA:src_ip} dest %{GREEDYDATA:dst_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-106020
   if [messageid]=="106020" {
        grok {
 			match => {
 				"cisco_msg" => [
				"%{WORD:action} IP teardrop fragment \(size(\s)?=(\s)?%{INT:fragment_size},(\s)?offset(\s)?=(\s)?%{INT:fragment_offset}\) from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-106021
   if [messageid]=="106021" {
        grok {
 			match => {
 				"cisco_msg" => [
				"%{WORD:action} protocol reverse path check from %{GREEDYDATA:src_ip} to %{GREEDYDATA:dst_ip} on interface %{GREEDYDATA:src_interface}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611301
   if [messageid]=="611301" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient:(\s)?%{WORD:protocol} configured for Client Mode with no split tunneling:(\s)?NAT address:(\s)?%{GREEDYDATA:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611303
   if [messageid]=="611303" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient:(\s)?%{WORD:protocol} configured for Client Mode with split tunneling: NAT address:(\s)?%{GREEDYDATA:nat_address} Split Tunnel Networks: %{GREEDYDATA:src_ip}/%{GREEDYDATA:src_masc} %{GREEDYDATA:dst_ip}/%{GREEDYDATA:dst_masc}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611304
   if [messageid]=="611304" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient:(\s)?%{WORD:protocol} exemption configured for Network Extension Mode with split tunneling: Split Tunnel Networks: %{GREEDYDATA:src_ip}/%{GREEDYDATA:src_masc} %{GREEDYDATA:dst_ip}/%{GREEDYDATA:dst_masc}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611307
   if [messageid]=="611307" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient:(\s)?Head end:(\s)?%{GREEDYDATA:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611309
   if [messageid]=="611309" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient:(\s)?%{WORD:action} from head end and uninstalling previously downloaded policy:(\s)?Head End:(\s)?%{GREEDYDATA:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611310,611311
   if [messageid]=="611310" or [messageid]=="611311" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VNPClient:(\s)?XAUTH (Succeeded|Failed):(\s)?Peer:(\s)?%{GREEDYDATA:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611314
   if [messageid]=="611314" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient: Load Balancing Cluster with Virtual IP:(\s)?%{GREEDYDATA:src_ip} has redirected the to server %{GREEDYDATA:dst_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611315
   if [messageid]=="611315" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient:(\s)?%{WORD:action} from Load Balancing Cluster member %{GREEDYDATA:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611318
   if [messageid]=="611318" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient:(\s)?User %{GREEDYDATA:action}:(\s)?Auth Server IP:(\s)?%{GREEDYDATA:src_ip} Auth Server Port:(\s)?%{INT:dst_port} Idle Timeout: %{INT:timeout}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-713252,713253
   if [messageid]=="713252" or [messageid]=="713253" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Group = %{GREEDYDATA:group},(\s)?Username(\s)?=(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?,(\s)?IP(\s)?=(\s)?%{GREEDYDATA:src_ip},(\s)?Integrity Firewall Server is not available.%{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-716001,716002,716003
   if [messageid]=="716001" or [messageid]=="716002" or [messageid]=="716003" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|'%{DATA:src_fwuser}'|%{DATA:src_fwuser}) IP (<%{IPORHOST:src_ip}>|%{IPORHOST:src_ip}) WebVPN %{GREEDYDATA:action}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-716004,716006,716007,716009
   if [messageid]=="716004" or [messageid]=="716006" or [messageid]=="716007" or [messageid]=="716009" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|'%{DATA:src_fwuser}'|%{DATA:src_fwuser}) WebVPN %{GREEDYDATA:action}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-716005
   if [messageid]=="716005" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|'%{DATA:src_fwuser}'|%{DATA:src_fwuser}) WebVPN ACL Parse Error:(\s)?%{GREEDYDATA:reason}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-716038
   if [messageid]=="716038" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Group (<%{DATA:group}>|%{GREEDYDATA:group}) User (<%{DATA:src_fwuser}>|'%{DATA:src_fwuser}'|%{DATA:src_fwuser}) IP %{IPORHOST:src_ip} %{GREEDYDATA:action}, Session %{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-716039
   if [messageid]=="716039" {
        grok {
 			match => {
 				"cisco_msg" => [
				"%{GREEDYDATA:action},(\s)?group(\s)?=(\s)?%{GREEDYDATA:group} user(\s)?=(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser})(\s)?,(\s)?Session %{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-719017,719019,719020
   if [messageid]=="719017" or [messageid]=="719019" or [messageid]=="719020" 
   or [messageid]=="719021" or [messageid]=="719022" or [messageid]=="719023" {
        grok {
 			match => {
 				"cisco_msg" => [
				"WebVPN user(:)?(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) %{GREEDYDATA:action}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-719018
   if [messageid]=="719018" {
        grok {
 			match => {
 				"cisco_msg" => [
				"WebVPN user:(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) ACL ID %{GREEDYDATA:access_list} not %{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
	mutate {
		add_field => {
			"[logx][cisco_firepower][reason]" => "ACL not found"
		}
	}
   }
#......................................................................#
#FTD-719024
   if [messageid]=="719024" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Email Proxy %{GREEDYDATA:action}:(\s)?session(\s)?=(\s)?%{GREEDYDATA:session} user(\s)?=(\s)?('%{DATA:src_fwuser}'|%{DATA:src_fwuser}) addr(\s)?=(\s)?%{GREEDYDATA:src_ip}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-609002
   if [messageid]=="609002" {
        grok {
 			match => {
 				"cisco_msg" => [
				"Teardown local-host %{GREEDYDATA:zone-name}/\*(\s)?:(\s)?%{GREEDYDATA:src_ip} duration %{GREEDYDATA:duration}"
 				]
 			}
 		}
   }
#......................................................................#
#FTD-611305
   if [messageid]=="611305" {
        grok {
 			match => {
 				"cisco_msg" => [
				"VPNClient(\s)?:(\s)?DHCP Policy installed(\s)?:(\s)?Primary DNS(\s)?:(\s)?%{GREEDYDATA:primary_dns_ip} Secondary DNS(\s)?:(\s)?%{GREEDYDATA:secondary_dns_ip} Primary WINS(\s)?:(\s)?%{GREEDYDATA:primary_wins_ip} Secondary WINS(\s)?:(\s)?%{GREEDYDATA:secondary_wins_ip}"
 				]
 			}
 		}
   }
#......................................................................#	   
#Decoding severity
if [severity] == "1" {
	mutate {
		add_field => {
			"[logx][cisco_firepower][severityLabel]" => "Alert"
		}
	}	
}
if [severity] == "2" {
	mutate {
		add_field => {
			"[logx][cisco_firepower][severityLabel]" => "Critical"
		}
	}	
}
if [severity] == "3" {
	mutate {
		add_field => {
			"[logx][cisco_firepower][severityLabel]" => "Error"
		}
	}	
}
if [severity] == "4" {
	mutate {
		add_field => {
			"[logx][cisco_firepower][severityLabel]" => "Warning"
		}
	}	
}
if [severity] == "5" {
	mutate {
		add_field => {
			"[logx][cisco_firepower][severityLabel]" => "Notification"
		}
	}	
}
if [severity] == "6" {
	mutate {
		add_field => {
			"[logx][cisco_firepower][severityLabel]" => "Informational"
		}
	}	
}
if [severity] == "7" {
	mutate {
		add_field => {
			"[logx][cisco_firepower][severityLabel]" => "Debugging"
		}
	}	
}
#......................................................................#	   
#Formatting number values
   mutate {
      convert => {
            "severity" => "integer"
            "messageid" => "integer"
            "src_port" => "integer"
            "dst_port" => "integer"
            "hit_count" => "integer"
            "bytes_xmt" => "integer"
            "bytes_rcv" => "integer"
            "in_if_num" => "integer"
            "out_if_num" => "integer"
            "mapped_src_port" => "integer"
            "mapped_dst_port" => "integer"
            "icmp_type" => "integer"
            "code" => "integer"
            "tunnel_id" => "integer"
            "num_conns" => "integer"
            "fragment_size" => "integer"
            "fragment_offset" => "integer"
			"timeout" => "integer"
			"global_port" => "integer"
			"src_port_local" => "integer"
        }
   }
#......................................................................#
#Then add all possible fields to the json tree structure

   mutate { 
      rename => { "priority" => "[logx][cisco_firepower][priority]" }
      rename => { "severity" => "[logx][cisco_firepower][severity]" }
      rename => { "message" => "[logx][cisco_firepower][message]" }
      rename => { "messageid" => "[logx][cisco_firepower][messageid]" }
      rename => { "action" => "[logx][cisco_firepower][action]" }
      rename => { "protocol" => "[logx][cisco_firepower][proto]" }
      rename => { "src_ip" => "[logx][cisco_firepower][src_ip]" }
      rename => { "src_port" => "[logx][cisco_firepower][src_port]" }
      rename => { "dst_ip" => "[logx][cisco_firepower][dest_ip]" }
      rename => { "dst_port" => "[logx][cisco_firepower][dest_port]" }
      rename => { "direction" => "[logx][cisco_firepower][direction]" }
      rename => { "src_interface" => "[logx][cisco_firepower][src_interface]" }
      rename => { "tcp_flags" => "[logx][cisco_firepower][tcp_flags]" }
	  
	  #New fields from FTD-6-106102
      rename => { "access_list" => "[logx][cisco_firepower][access_list_id]" }
      rename => { "dst_interface" => "[logx][cisco_firepower][dst_interface]" }
      rename => { "src_fwuser" => "[logx][cisco_firepower][src_user]" }
      rename => { "hit_count" => "[logx][cisco_firepower][hit_count]" }
	  
	  #New fields from FTD-109101,109102,109103
      rename => { "audit_session_id" => "[logx][cisco_firepower][audit_session_id]" }
	  
	  #New fields from FTD-109201 to 109213
      rename => { "session" => "[logx][cisco_firepower][session]" }
	  
	  #New fields from FTD-113004
      rename => { "aaa_type" => "[logx][cisco_firepower][aaa_type]" }

	  #New fields from FTD-113009
      rename => { "policy" => "[logx][cisco_firepower][policy]" }
	  
	  #New fields from FTD-113013
      rename => { "reason" => "[logx][cisco_firepower][reason]" }
	  
	  #New fields from FTD-113019
      rename => { "group" => "[logx][cisco_firepower][group]" }
      rename => { "session_type" => "[logx][cisco_firepower][session_type]" }
      rename => { "duration" => "[logx][cisco_firepower][duration]" }
      rename => { "bytes_xmt" => "[logx][cisco_firepower][bytes_xmt]" }
      rename => { "bytes_rcv" => "[logx][cisco_firepower][bytes_rcv]" }
	  
	  #New fields from FTD-113031
      rename => { "filter" => "[logx][cisco_firepower][filter]" }
	  
	  #New fields from FTD-113042
      rename => { "client_ip" => "[logx][cisco_firepower][client_ip]" }
	  
	  #New fields from FTD-316002
      rename => { "in_if_num" => "[logx][cisco_firepower][in_if_num]" }
      rename => { "out_if_num" => "[logx][cisco_firepower][out_if_num]" }
	  
	  #New fields from FTD-302013
      rename => { "connection_id" => "[logx][cisco_firepower][connection_id]" }
      rename => { "mapped_src_ip" => "[logx][cisco_firepower][mapped_src_ip]" }
      rename => { "mapped_src_port" => "[logx][cisco_firepower][mapped_src_port]" }
      rename => { "mapped_dst_ip" => "[logx][cisco_firepower][mapped_dst_ip]" }
      rename => { "mapped_dst_port" => "[logx][cisco_firepower][mapped_dst_port]" }
      rename => { "dst_fwuser" => "[logx][cisco_firepower][dst_user]" }

	  #New fields from FTD-302017
      rename => { "translated_src_ip" => "[logx][cisco_firepower][translated_src_ip]" }
      rename => { "translated_dst_ip" => "[logx][cisco_firepower][translated_dst_ip]" }
      rename => { "translated_cid" => "[logx][cisco_firepower][translated_cid]" }
      rename => { "real_cid" => "[logx][cisco_firepower][real_cid]" }

	  #New fields from FTD-302021
      rename => { "icmp_type" => "[logx][cisco_firepower][icmp_type]" }
      rename => { "code" => "[logx][cisco_firepower][code]" }
      rename => { "src_ip_local" => "[logx][cisco_firepower][src_ip_local]" }
	  rename => { "src_port_local" => "[logx][cisco_firepower][src_port_local]" }

	  #New fields from FTD-302020
      rename => { "global_ip" => "[logx][cisco_firepower][global_ip]" }
	  rename => { "global_port" => "[logx][cisco_firepower][global_port]" }

	  #New fields from FTD-302022
      rename => { "role" => "[logx][cisco_firepower][role]" }

	  #New fields from FTD-305012
      rename => { "acl_name" => "[logx][cisco_firepower][access_list_name]" }

	  #New fields from FTD-603109
      rename => { "tunnel_id" => "[logx][cisco_firepower][tunnel_id]" }

	  #New fields from FTD-617100
      rename => { "num_conns" => "[logx][cisco_firepower][num_conns]" }

	  #New fields from FTD-106020
      rename => { "fragment_size" => "[logx][cisco_firepower][fragment_size]" }
      rename => { "fragment_offset" => "[logx][cisco_firepower][fragment_offset]" }

	  #New fields from FTD-611303
      rename => { "nat_address" => "[logx][cisco_firepower][nat_address]" }
      rename => { "src_masc" => "[logx][cisco_firepower][src_masc]" }
	  rename => { "dst_masc" => "[logx][cisco_firepower][dst_masc]" }

	  #New fields from FTD-611305
      rename => { "primary_dns_ip" => "[logx][cisco_firepower][primary_dns_ip]" }
      rename => { "secondary_dns_ip" => "[logx][cisco_firepower][secondary_dns_ip]" }
	  rename => { "primary_wins_ip" => "[logx][cisco_firepower][primary_wins_ip]" }
	  rename => { "secondary_wins_ip" => "[logx][cisco_firepower][secondary_wins_ip]" }

	  #New fields from FTD-611318
      rename => { "timeout" => "[logx][cisco_firepower][timeout]" }

	  #New fields from FTD-609002
      rename => { "zone-name" => "[logx][cisco_firepower][zone-name]" }

   }
   
   #Finally, remove unnecessary fields
   mutate {
      remove_field => ["@version","path","cisco_tag","cisco_msg_init","cisco_message","fecha","irrelevant","cisco_msg"]
   }		
   }
}