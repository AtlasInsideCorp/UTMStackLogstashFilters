filter {
 #Check the minimum fields present in fortinet log, based in docs and samples provided
 #Were 73 different fields identified, below 6 are used to identify fortinet log
 #In addition we check that "traffic" and "forward" strings are present in message
 
 if ("traffic" in [message] and "forward" in [message]
 and "date=" in [message] and "time=" in [message] and "logid=" in [message]
 and "type=" in [message] and "subtype=" in [message] and "level=" in [message]) { 

#......................................................................# 
 #First, replace whitespaces with default string after = to avoid kv issues, example:
 #device_id= date=2021-08-18, generates -> device_id="date=2021-08-18"
 #and should generate two fields: device_id and date
      mutate {
        gsub => [
          "message", "= ", "=X0X "
        ]
      }

#......................................................................#
#Using the kv filter with default config, usefull in key-value logs
 kv {}
 
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
#Checks if devname field is present or if it has no value, in those
#cases datasource points to host field
 if ([devname]){
   if ([devname]=="X0X"){
    mutate {
     add_field => { "dataSource" => "%{host}" }
	}
	#Eliminating devname if it is present but has no value
	ruby { code => 'event.set("[devname]", nil)' }

   }else{
    mutate {
     add_field => { "dataSource" => "%{devname}" }
	}
   }
 }else{
    mutate {
     add_field => { "dataSource" => "%{host}" }
	}
 }
#......................................................................# 
#Generating dataType field required by CurrelationRulesEngine
   mutate {
		  add_field => {
			"dataType" => "firewall-fortigate-traffic"
		  }
	   }

#......................................................................#	   
#Formatting number values
   mutate {
      convert => {
        "duration" => "integer"
		    "sessionid" => "integer"
		    "transport" => "integer"
		    "srcport" => "integer"
		    "srcserver" => "integer"
		    "dstport" => "integer"
		    "appid" => "integer"
		    "countapp" => "integer"
		    "rcvdbyte" => "integer"
		    "rcvdpkt" => "integer"
        "rcvddelta" => "integer"
		    "sentbyte" => "integer"
        "sentdelta" => "integer"
		    "sentpkt" => "integer"
		    "policyid" => "integer"
		    "eventtime" => "integer"
		    "proto" => "integer"
		    "countdns" => "integer"
        }
   }
#......................................................................#
#The fields that contains the default string for null values "X0X"
#will be set to null
   
   if [date]=="X0X" {
	   ruby { code => 'event.set("[date]", nil)' }
   }
   if [time]=="X0X" {
	   ruby { code => 'event.set("[time]", nil)' }
   }
   if [logid]=="X0X" {
	   ruby { code => 'event.set("[logid]", nil)' }
   }
   if [type]=="X0X" {
	   ruby { code => 'event.set("[type]", nil)' }
   }
   if [subtype]=="X0X" {
	   ruby { code => 'event.set("[subtype]", nil)' }
   }
   if [level]=="X0X" {
	   ruby { code => 'event.set("[level]", nil)' }
   }
   if [vd]=="X0X" {
	   ruby { code => 'event.set("[vd]", nil)' }
   }
   if [eventtime]=="X0X" {
	   ruby { code => 'event.set("[eventtime]", nil)' }
   }
   if [tz]=="X0X" {
	   ruby { code => 'event.set("[tz]", nil)' }
   }
   if [srcip]=="X0X" {
	   ruby { code => 'event.set("[srcip]", nil)' }
   }
   if [srcport]=="X0X" {
	   ruby { code => 'event.set("[srcport]", nil)' }
   }
   if [srcintfrole]=="X0X" {
	   ruby { code => 'event.set("[srcintfrole]", nil)' }
   }
   if [dstip]=="X0X" {
	   ruby { code => 'event.set("[dstip]", nil)' }
   }
   if [dstport]=="X0X" {
	   ruby { code => 'event.set("[dstport]", nil)' }
   }
   if [dstintf]=="X0X" {
	   ruby { code => 'event.set("[dstintf]", nil)' }
   }
   if [dstintfrole]=="X0X" {
	   ruby { code => 'event.set("[dstintfrole]", nil)' }
   }
   if [sessionid]=="X0X" {
	   ruby { code => 'event.set("[sessionid]", nil)' }
   }
   if [proto]=="X0X" {
	   ruby { code => 'event.set("[proto]", nil)' }
   }
   if [action]=="X0X" {
	   ruby { code => 'event.set("[action]", nil)' }
   }
   if [policyid]=="X0X" {
	   ruby { code => 'event.set("[policyid]", nil)' }
   }
   if [policytype]=="X0X" {
	   ruby { code => 'event.set("[policytype]", nil)' }
   }
   if [service]=="X0X" {
	   ruby { code => 'event.set("[service]", nil)' }
   }
   if [trandisp]=="X0X" {
	   ruby { code => 'event.set("[trandisp]", nil)' }
   }
   if [duration]=="X0X" {
	   ruby { code => 'event.set("[duration]", nil)' }
   }
   if [mastersrcmac]=="X0X" {
	   ruby { code => 'event.set("[mastersrcmac]", nil)' }
   }
   if [srcmac]=="X0X" {
	   ruby { code => 'event.set("[srcmac]", nil)' }
   }
   if [srcintf]=="X0X" {
	   ruby { code => 'event.set("[srcintf]", nil)' }
   }
   if [srcname]=="X0X" {
	   ruby { code => 'event.set("[srcname]", nil)' }
   }
   if [dstcountry]=="X0X" {
	   ruby { code => 'event.set("[dstcountry]", nil)' }
   }
   if [srccountry]=="X0X" {
	   ruby { code => 'event.set("[srccountry]", nil)' }
   }
   if [appid]=="X0X" {
	   ruby { code => 'event.set("[appid]", nil)' }
   }
   if [app]=="X0X" {
	   ruby { code => 'event.set("[app]", nil)' }
   }
   if [appcat]=="X0X" {
	   ruby { code => 'event.set("[appcat]", nil)' }
   }
   if [apprisk]=="X0X" {
	   ruby { code => 'event.set("[apprisk]", nil)' }
   }
   if [applist]=="X0X" {
	   ruby { code => 'event.set("[applist]", nil)' }
   }
   if [appact]=="X0X" {
	   ruby { code => 'event.set("[appact]", nil)' }
   }
   if [sentbyte]=="X0X" {
	   ruby { code => 'event.set("[sentbyte]", nil)' }
   }
   if [rcvdbyte]=="X0X" {
	   ruby { code => 'event.set("[rcvdbyte]", nil)' }
   }
   if [sentpkt]=="X0X" {
	   ruby { code => 'event.set("[sentpkt]", nil)' }
   }
   if [rcvdpkt]=="X0X" {
	   ruby { code => 'event.set("[rcvdpkt]", nil)' }
   }
   if [sentdelta]=="X0X" {
	   ruby { code => 'event.set("[sentdelta]", nil)' }
   }
   if [rcvddelta]=="X0X" {
	   ruby { code => 'event.set("[rcvddelta]", nil)' }
   }
   if [osname]=="X0X" {
	   ruby { code => 'event.set("[osname]", nil)' }
   }
   if [srcswversion]=="X0X" {
	   ruby { code => 'event.set("[srcswversion]", nil)' }
   }
   if [srchwversion]=="X0X" {
	   ruby { code => 'event.set("[srchwversion]", nil)' }
   }
   if [srcserver]=="X0X" {
	   ruby { code => 'event.set("[srcserver]", nil)' }
   }
   if [srchwvendor]=="X0X" {
	   ruby { code => 'event.set("[srchwvendor]", nil)' }
   }
   if [dsthwvendor]=="X0X" {
	   ruby { code => 'event.set("[dsthwvendor]", nil)' }
   }
   if [dstosname]=="X0X" {
	   ruby { code => 'event.set("[dstosname]", nil)' }
   }
   if [dstswversion]=="X0X" {
	   ruby { code => 'event.set("[dstswversion]", nil)' }
   }
   if [unauthuser]=="X0X" {
	   ruby { code => 'event.set("[unauthuser]", nil)' }
   }
   if [unauthusersource]=="X0X" {
	   ruby { code => 'event.set("[unauthusersource]", nil)' }
   }
   if [dstunauthuser]=="X0X" {
	   ruby { code => 'event.set("[dstunauthuser]", nil)' }
   }
   if [dstunauthusersource]=="X0X" {
	   ruby { code => 'event.set("[dstunauthusersource]", nil)' }
   }
   if [masterdstmac]=="X0X" {
	   ruby { code => 'event.set("[masterdstmac]", nil)' }
   }
   if [dstmac]=="X0X" {
	   ruby { code => 'event.set("[dstmac]", nil)' }
   }
   if [dstserver]=="X0X" {
	   ruby { code => 'event.set("[dstserver]", nil)' }
   }
   if [device_id]=="X0X" {
	   ruby { code => 'event.set("[device_id]", nil)' }
   }
   if [transip]=="X0X" {
	   ruby { code => 'event.set("[transip]", nil)' }
   }
   if [transport]=="X0X" {
	   ruby { code => 'event.set("[transport]", nil)' }
   }
   if [utmaction]=="X0X" {
	   ruby { code => 'event.set("[utmaction]", nil)' }
   }
   if [utmref]=="X0X" {
	   ruby { code => 'event.set("[utmref]", nil)' }
   }
   if [countdns]=="X0X" {
	   ruby { code => 'event.set("[countdns]", nil)' }
   }
   if [direction]=="X0X" {
	   ruby { code => 'event.set("[direction]", nil)' }
   }
   if [devtype]=="X0X" {
	   ruby { code => 'event.set("[devtype]", nil)' }
   }
   if [countapp]=="X0X" {
	   ruby { code => 'event.set("[countapp]", nil)' }
   }
   if [poluuid]=="X0X" {
	   ruby { code => 'event.set("[poluuid]", nil)' }
   }
   if [policymode]=="X0X" {
	   ruby { code => 'event.set("[policymode]", nil)' }
   }
   if [crscore]=="X0X" {
	   ruby { code => 'event.set("[crscore]", nil)' }
   }
   if [craction]=="X0X" {
	   ruby { code => 'event.set("[craction]", nil)' }
   }
   if [crlevel]=="X0X" {
	   ruby { code => 'event.set("[crlevel]", nil)' }
   }
   if [identifier]=="X0X" {
	   ruby { code => 'event.set("[identifier]", nil)' }
   }
   
#......................................................................#
#Then add all possible fields to the json tree structure

   mutate { 
    rename => { "devname" => "[logx][fortigate][devname]" }
	  rename => { "message" => "[logx][fortigate][message]" }
	  rename => { "devname" => "[logx][fortigate][devname]" }
    rename => { "date" => "[logx][fortigate][date]" }
	  rename => { "time" => "[logx][fortigate][time]" }
	  rename => { "logid" => "[logx][fortigate][logid]" }
	  rename => { "type" => "[logx][fortigate][type]" }
	  rename => { "subtype" => "[logx][fortigate][subtype]" }
	  rename => { "level" => "[logx][fortigate][level]" }
	  rename => { "vd" => "[logx][fortigate][vd]" }
	  rename => { "eventtime" => "[logx][fortigate][eventtime]" }
	  rename => { "tz" => "[logx][fortigate][tz]" }
	  rename => { "srcip" => "[logx][fortigate][src_ip]" }
	  rename => { "srcport" => "[logx][fortigate][src_port]" }
	  rename => { "srcintfrole" => "[logx][fortigate][srcintfrole]" }
	  rename => { "dstip" => "[logx][fortigate][dest_ip]" }
	  rename => { "dstport" => "[logx][fortigate][dest_port]" }
	  rename => { "dstintf" => "[logx][fortigate][dstintf]" }
	  rename => { "dstintfrole" => "[logx][fortigate][dstintfrole]" }
	  rename => { "sessionid" => "[logx][fortigate][sessionid]" }
	  rename => { "proto" => "[logx][fortigate][proto]" }
	  rename => { "action" => "[logx][fortigate][action]" }
	  rename => { "policyid" => "[logx][fortigate][policyid]" }
	  rename => { "policytype" => "[logx][fortigate][policytype]" }
	  rename => { "service" => "[logx][fortigate][service]" }
	  rename => { "trandisp" => "[logx][fortigate][trandisp]" }
	  rename => { "duration" => "[logx][fortigate][duration]" }
	  rename => { "mastersrcmac" => "[logx][fortigate][mastersrcmac]" }
	  rename => { "srcmac" => "[logx][fortigate][srcmac]" }
	  rename => { "srcintf" => "[logx][fortigate][srcintf]" }
	  rename => { "srcname" => "[logx][fortigate][srcname]" }
	  rename => { "dstcountry" => "[logx][fortigate][dstcountry]" }
	  rename => { "srccountry" => "[logx][fortigate][srccountry]" }
	  rename => { "appid" => "[logx][fortigate][appid]" }
	  rename => { "app" => "[logx][fortigate][app]" }
	  rename => { "appcat" => "[logx][fortigate][appcat]" }
	  rename => { "apprisk" => "[logx][fortigate][apprisk]" }
	  rename => { "applist" => "[logx][fortigate][applist]" }
	  rename => { "appact" => "[logx][fortigate][appact]" }
	  rename => { "sentbyte" => "[logx][fortigate][sentbyte]" }
	  rename => { "rcvdbyte" => "[logx][fortigate][rcvdbyte]" }
	  rename => { "sentpkt" => "[logx][fortigate][sentpkt]" }
	  rename => { "rcvdpkt" => "[logx][fortigate][rcvdpkt]" }
	  rename => { "sentdelta" => "[logx][fortigate][sentdelta]" }
	  rename => { "rcvddelta" => "[logx][fortigate][rcvddelta]" }
	  rename => { "osname" => "[logx][fortigate][osname]" }
	  rename => { "srcswversion" => "[logx][fortigate][srcswversion]" }
	  rename => { "srchwversion" => "[logx][fortigate][srchwversion]" }
	  rename => { "srcserver" => "[logx][fortigate][srcserver]" }
	  rename => { "srchwvendor" => "[logx][fortigate][srchwvendor]" }
	  rename => { "dsthwvendor" => "[logx][fortigate][dsthwvendor]" }
	  rename => { "dstosname" => "[logx][fortigate][dstosname]" }
	  rename => { "dstswversion" => "[logx][fortigate][dstswversion]" }
	  rename => { "unauthuser" => "[logx][fortigate][unauthuser]" }
	  rename => { "unauthusersource" => "[logx][fortigate][unauthusersource]" }
	  rename => { "dstunauthuser" => "[logx][fortigate][dstunauthuser]" }
	  rename => { "dstunauthusersource" => "[logx][fortigate][dstunauthusersource]" }
	  rename => { "masterdstmac" => "[logx][fortigate][masterdstmac]" }
	  rename => { "dstmac" => "[logx][fortigate][dstmac]" }
	  rename => { "dstserver" => "[logx][fortigate][dstserver]" }
	  rename => { "device_id" => "[logx][fortigate][device_id]" }
	  rename => { "transip" => "[logx][fortigate][transip]" }
	  rename => { "transport" => "[logx][fortigate][transport]" }
	  rename => { "utmaction" => "[logx][fortigate][utmaction]" }
	  rename => { "utmref" => "[logx][fortigate][utmref]" }
	  rename => { "countdns" => "[logx][fortigate][countdns]" }
	  rename => { "direction" => "[logx][fortigate][direction]" }
	  rename => { "devtype" => "[logx][fortigate][devtype]" }
	  rename => { "countapp" => "[logx][fortigate][countapp]" }
	  rename => { "poluuid" => "[logx][fortigate][poluuid]" }
	  rename => { "policymode" => "[logx][fortigate][policymode]" }
	  rename => { "crscore" => "[logx][fortigate][crscore]" }
	  rename => { "craction" => "[logx][fortigate][craction]" }
	  rename => { "crlevel" => "[logx][fortigate][crlevel]" }
	  rename => { "identifier" => "[logx][fortigate][identifier]" }
   }
   
   #Cleaning message field
   mutate {
      gsub => ["[logx][fortigate][message]", "X0X", ""]
   }
   #Finally, remove unnecessary fields
   mutate {
      remove_field => ["@version","path"]
        }
 }
}